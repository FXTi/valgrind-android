name: release
#on: [push, pull_request]
on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  android:
    runs-on: ubuntu-latest
    env:
      VALGRIND_VERSION: 3.17.0
      PACKAGENAME: valgrind-3.17.0-android
    steps:
    - uses: actions/checkout@v2
    - name: valgrind-source
      run: |
        wget -q https://sourceware.org/pub/valgrind/valgrind-${{ env.VALGRIND_VERSION }}.tar.bz2
        tar -xf valgrind-${{ env.VALGRIND_VERSION }}.tar.bz2
        cd valgrind-${{ env.VALGRIND_VERSION }}
        patch -p1 -i ../valgrind-3.16.1-ndk-r19-minimal_setjmp.patch
        patch -p1 -i ../valgrind-3.16.1-fix-build-new-ndk.patch
    - uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r21e
        add-to-path: false
    #- uses: shaowenchen/debugger-action@v2
      #name: debugger
      #timeout-minutes: 30
      #continue-on-error: true
      #with:
        #ngrok_token: ${{ secrets.NGROK_TOKEN }}
    - name: build-arm64-v8a
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: |
        cd valgrind-${{ env.VALGRIND_VERSION }}

        export AR=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar
        export LD=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ld
        export CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang

        export CPPFLAGS="-O0 --target=aarch64-none-linux-android21 --gcc-toolchain=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64 --sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
        export CFLAGS="-O0 --target=aarch64-none-linux-android21 --gcc-toolchain=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64 --sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"

        ./configure --prefix=/data/local/tmp/valgrind --host=aarch64-unknown-linux --target=aarch64-unknown-linux --with-tmpdir=/data/local/tmp
        make -j2
        make install DESTDIR=`pwd`/install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf valgrind-${{ env.VALGRIND_VERSION }}/install/data/local/tmp/valgrind ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/valgrind/include
        rm -rf ${{ env.PACKAGENAME }}/valgrind/share
        rm -rf ${{ env.PACKAGENAME }}/valgrind/lib
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, android]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.VERSION }}
        release_name: Release ${{ needs.setup.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: upload-android
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: valgrind-3.17.0-android
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip
